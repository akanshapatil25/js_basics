
 What is a Callback?
 A function passed as an argument to another function and executed later its useful for async tasks (API calls, events, file reading).

function greet(name, callback) {
    console.log("Hello, " + name);
    callback();
}

function sayBye() {
    console.log("Goodbye!");
}

greet("Ajay", sayBye);


 How Callbacks Work
JavaScript runs synchronously  hencs callbacks help delay or sequence code execution in order we want
Example: Asynchronous Callback

console.log("Start");

setTimeout(function () {
    console.log("Inside setTimeout");
}, 2000);//executed after 2 sec

console.log("End");





one way of implementation is as bwlow
function calc(a, b, callback) {
    return callback(a, b);
}

function add(x, y) { return x + y; }
function mul(x, y) { return x * y; }

console.log(calc(5, 3, add)); 
console.log(calc(5, 3, mul));

we can  also use in event listeners
document.getElementById("btn").addEventListener("click", function () {
    console.log("Button clicked!");
});

for API Calls with Callbacks

function fetchData(callback) {
    fetch("https://jsonplaceholder.typicode.com/todos/1")
        .then(response => response.json())
        .then(data => callback(data))
        .catch(error => console.error("error:", error));
}

function handle(data) {
    console.log("Fetched data:", data);
}

fetchData(handle);

instead of callback we can also use:

 Promise
 A Promise is a placeholder for a value that may not be available yet.
It simplifies async operations

Promise States:

1. Pending   - Initial state.
2. Fulfilled - Operation completed successfully.
3. Rejected  - Operation failed with an error.


let checkEven = new Promise((resolve, reject) => {
    let number = 4;
    if (number % 2 === 0) resolve("The number is even!");
    else reject("The number is odd!");
});

checkEven
    .then(message => console.log(message))  
    .catch(error => console.error(error));  



 reject("Task failed");




another way of implementation of callback is:
Async and Await in JavaScript
Async and Await simplify handling asynchronous operations using Promises.

async function fetchData() {
  const response = await fetch("https://jsonplaceholder.typicode.com/posts/1");
  const data = await response.json();
  console.log(data);
}

fetchData();



basic syntax
async function functionName() {
  try {
    const result = await someAsyncFunction();
    console.log(result);
  } catch (error) {
    console.error("Error:", error.message);
  }
}

 Async Function

Declared with the async keyword.
Always returns a Promise.



async function myFunction() {
  return "Hello";
}

const getData = async () => {
    let data = "Hello World";
    return data;
};

getData().then(data => console.log(data));



 Await Keyword
 Can only be used inside an async function.
 Pauses execution until the Promise is resolved.
  Makes asynchronous code behave like synchronous code.

Example:
const getData = async () => {
    let y = await "Hello World";
    console.log(y);
};

console.log(1);
getData();
console.log(2);


